// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: patchpanel-service.proto

#ifndef PROTOBUF_INCLUDED_patchpanel_2dservice_2eproto
#define PROTOBUF_INCLUDED_patchpanel_2dservice_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_patchpanel_2dservice_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_patchpanel_2dservice_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[9]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
namespace patchpanel {
class ArcShutdownRequest;
class ArcShutdownRequestDefaultTypeInternal;
extern ArcShutdownRequestDefaultTypeInternal _ArcShutdownRequest_default_instance_;
class ArcShutdownResponse;
class ArcShutdownResponseDefaultTypeInternal;
extern ArcShutdownResponseDefaultTypeInternal _ArcShutdownResponse_default_instance_;
class ArcStartupRequest;
class ArcStartupRequestDefaultTypeInternal;
extern ArcStartupRequestDefaultTypeInternal _ArcStartupRequest_default_instance_;
class ArcStartupResponse;
class ArcStartupResponseDefaultTypeInternal;
extern ArcStartupResponseDefaultTypeInternal _ArcStartupResponse_default_instance_;
class ArcVmShutdownRequest;
class ArcVmShutdownRequestDefaultTypeInternal;
extern ArcVmShutdownRequestDefaultTypeInternal _ArcVmShutdownRequest_default_instance_;
class ArcVmShutdownResponse;
class ArcVmShutdownResponseDefaultTypeInternal;
extern ArcVmShutdownResponseDefaultTypeInternal _ArcVmShutdownResponse_default_instance_;
class ArcVmStartupRequest;
class ArcVmStartupRequestDefaultTypeInternal;
extern ArcVmStartupRequestDefaultTypeInternal _ArcVmStartupRequest_default_instance_;
class ArcVmStartupResponse;
class ArcVmStartupResponseDefaultTypeInternal;
extern ArcVmStartupResponseDefaultTypeInternal _ArcVmStartupResponse_default_instance_;
class Device;
class DeviceDefaultTypeInternal;
extern DeviceDefaultTypeInternal _Device_default_instance_;
}  // namespace patchpanel
namespace google {
namespace protobuf {
template<> ::patchpanel::ArcShutdownRequest* Arena::CreateMaybeMessage<::patchpanel::ArcShutdownRequest>(Arena*);
template<> ::patchpanel::ArcShutdownResponse* Arena::CreateMaybeMessage<::patchpanel::ArcShutdownResponse>(Arena*);
template<> ::patchpanel::ArcStartupRequest* Arena::CreateMaybeMessage<::patchpanel::ArcStartupRequest>(Arena*);
template<> ::patchpanel::ArcStartupResponse* Arena::CreateMaybeMessage<::patchpanel::ArcStartupResponse>(Arena*);
template<> ::patchpanel::ArcVmShutdownRequest* Arena::CreateMaybeMessage<::patchpanel::ArcVmShutdownRequest>(Arena*);
template<> ::patchpanel::ArcVmShutdownResponse* Arena::CreateMaybeMessage<::patchpanel::ArcVmShutdownResponse>(Arena*);
template<> ::patchpanel::ArcVmStartupRequest* Arena::CreateMaybeMessage<::patchpanel::ArcVmStartupRequest>(Arena*);
template<> ::patchpanel::ArcVmStartupResponse* Arena::CreateMaybeMessage<::patchpanel::ArcVmStartupResponse>(Arena*);
template<> ::patchpanel::Device* Arena::CreateMaybeMessage<::patchpanel::Device>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace patchpanel {

// ===================================================================

class ArcStartupRequest final :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:patchpanel.ArcStartupRequest) */ {
 public:
  ArcStartupRequest();
  virtual ~ArcStartupRequest();

  ArcStartupRequest(const ArcStartupRequest& from);

  inline ArcStartupRequest& operator=(const ArcStartupRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ArcStartupRequest(ArcStartupRequest&& from) noexcept
    : ArcStartupRequest() {
    *this = ::std::move(from);
  }

  inline ArcStartupRequest& operator=(ArcStartupRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ArcStartupRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ArcStartupRequest* internal_default_instance() {
    return reinterpret_cast<const ArcStartupRequest*>(
               &_ArcStartupRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(ArcStartupRequest* other);
  friend void swap(ArcStartupRequest& a, ArcStartupRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ArcStartupRequest* New() const final {
    return CreateMaybeMessage<ArcStartupRequest>(nullptr);
  }

  ArcStartupRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ArcStartupRequest>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const ArcStartupRequest& from);
  void MergeFrom(const ArcStartupRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ArcStartupRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 pid = 1;
  void clear_pid();
  static const int kPidFieldNumber = 1;
  ::google::protobuf::int32 pid() const;
  void set_pid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:patchpanel.ArcStartupRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::int32 pid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_patchpanel_2dservice_2eproto;
};
// -------------------------------------------------------------------

class ArcStartupResponse final :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:patchpanel.ArcStartupResponse) */ {
 public:
  ArcStartupResponse();
  virtual ~ArcStartupResponse();

  ArcStartupResponse(const ArcStartupResponse& from);

  inline ArcStartupResponse& operator=(const ArcStartupResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ArcStartupResponse(ArcStartupResponse&& from) noexcept
    : ArcStartupResponse() {
    *this = ::std::move(from);
  }

  inline ArcStartupResponse& operator=(ArcStartupResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ArcStartupResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ArcStartupResponse* internal_default_instance() {
    return reinterpret_cast<const ArcStartupResponse*>(
               &_ArcStartupResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(ArcStartupResponse* other);
  friend void swap(ArcStartupResponse& a, ArcStartupResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ArcStartupResponse* New() const final {
    return CreateMaybeMessage<ArcStartupResponse>(nullptr);
  }

  ArcStartupResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ArcStartupResponse>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const ArcStartupResponse& from);
  void MergeFrom(const ArcStartupResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ArcStartupResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:patchpanel.ArcStartupResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_patchpanel_2dservice_2eproto;
};
// -------------------------------------------------------------------

class ArcShutdownRequest final :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:patchpanel.ArcShutdownRequest) */ {
 public:
  ArcShutdownRequest();
  virtual ~ArcShutdownRequest();

  ArcShutdownRequest(const ArcShutdownRequest& from);

  inline ArcShutdownRequest& operator=(const ArcShutdownRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ArcShutdownRequest(ArcShutdownRequest&& from) noexcept
    : ArcShutdownRequest() {
    *this = ::std::move(from);
  }

  inline ArcShutdownRequest& operator=(ArcShutdownRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ArcShutdownRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ArcShutdownRequest* internal_default_instance() {
    return reinterpret_cast<const ArcShutdownRequest*>(
               &_ArcShutdownRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(ArcShutdownRequest* other);
  friend void swap(ArcShutdownRequest& a, ArcShutdownRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ArcShutdownRequest* New() const final {
    return CreateMaybeMessage<ArcShutdownRequest>(nullptr);
  }

  ArcShutdownRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ArcShutdownRequest>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const ArcShutdownRequest& from);
  void MergeFrom(const ArcShutdownRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ArcShutdownRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 pid = 1;
  void clear_pid();
  static const int kPidFieldNumber = 1;
  ::google::protobuf::int32 pid() const;
  void set_pid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:patchpanel.ArcShutdownRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::int32 pid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_patchpanel_2dservice_2eproto;
};
// -------------------------------------------------------------------

class ArcShutdownResponse final :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:patchpanel.ArcShutdownResponse) */ {
 public:
  ArcShutdownResponse();
  virtual ~ArcShutdownResponse();

  ArcShutdownResponse(const ArcShutdownResponse& from);

  inline ArcShutdownResponse& operator=(const ArcShutdownResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ArcShutdownResponse(ArcShutdownResponse&& from) noexcept
    : ArcShutdownResponse() {
    *this = ::std::move(from);
  }

  inline ArcShutdownResponse& operator=(ArcShutdownResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ArcShutdownResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ArcShutdownResponse* internal_default_instance() {
    return reinterpret_cast<const ArcShutdownResponse*>(
               &_ArcShutdownResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(ArcShutdownResponse* other);
  friend void swap(ArcShutdownResponse& a, ArcShutdownResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ArcShutdownResponse* New() const final {
    return CreateMaybeMessage<ArcShutdownResponse>(nullptr);
  }

  ArcShutdownResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ArcShutdownResponse>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const ArcShutdownResponse& from);
  void MergeFrom(const ArcShutdownResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ArcShutdownResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:patchpanel.ArcShutdownResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_patchpanel_2dservice_2eproto;
};
// -------------------------------------------------------------------

class ArcVmStartupRequest final :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:patchpanel.ArcVmStartupRequest) */ {
 public:
  ArcVmStartupRequest();
  virtual ~ArcVmStartupRequest();

  ArcVmStartupRequest(const ArcVmStartupRequest& from);

  inline ArcVmStartupRequest& operator=(const ArcVmStartupRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ArcVmStartupRequest(ArcVmStartupRequest&& from) noexcept
    : ArcVmStartupRequest() {
    *this = ::std::move(from);
  }

  inline ArcVmStartupRequest& operator=(ArcVmStartupRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ArcVmStartupRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ArcVmStartupRequest* internal_default_instance() {
    return reinterpret_cast<const ArcVmStartupRequest*>(
               &_ArcVmStartupRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(ArcVmStartupRequest* other);
  friend void swap(ArcVmStartupRequest& a, ArcVmStartupRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ArcVmStartupRequest* New() const final {
    return CreateMaybeMessage<ArcVmStartupRequest>(nullptr);
  }

  ArcVmStartupRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ArcVmStartupRequest>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const ArcVmStartupRequest& from);
  void MergeFrom(const ArcVmStartupRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ArcVmStartupRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 cid = 1;
  void clear_cid();
  static const int kCidFieldNumber = 1;
  ::google::protobuf::int32 cid() const;
  void set_cid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:patchpanel.ArcVmStartupRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::int32 cid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_patchpanel_2dservice_2eproto;
};
// -------------------------------------------------------------------

class Device final :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:patchpanel.Device) */ {
 public:
  Device();
  virtual ~Device();

  Device(const Device& from);

  inline Device& operator=(const Device& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Device(Device&& from) noexcept
    : Device() {
    *this = ::std::move(from);
  }

  inline Device& operator=(Device&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const Device& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Device* internal_default_instance() {
    return reinterpret_cast<const Device*>(
               &_Device_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(Device* other);
  friend void swap(Device& a, Device& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Device* New() const final {
    return CreateMaybeMessage<Device>(nullptr);
  }

  Device* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Device>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const Device& from);
  void MergeFrom(const Device& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Device* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string ifname = 1;
  void clear_ifname();
  static const int kIfnameFieldNumber = 1;
  const ::std::string& ifname() const;
  void set_ifname(const ::std::string& value);
  #if LANG_CXX11
  void set_ifname(::std::string&& value);
  #endif
  void set_ifname(const char* value);
  void set_ifname(const char* value, size_t size);
  ::std::string* mutable_ifname();
  ::std::string* release_ifname();
  void set_allocated_ifname(::std::string* ifname);

  // uint32 ipv4_addr = 2;
  void clear_ipv4_addr();
  static const int kIpv4AddrFieldNumber = 2;
  ::google::protobuf::uint32 ipv4_addr() const;
  void set_ipv4_addr(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:patchpanel.Device)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr ifname_;
  ::google::protobuf::uint32 ipv4_addr_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_patchpanel_2dservice_2eproto;
};
// -------------------------------------------------------------------

class ArcVmStartupResponse final :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:patchpanel.ArcVmStartupResponse) */ {
 public:
  ArcVmStartupResponse();
  virtual ~ArcVmStartupResponse();

  ArcVmStartupResponse(const ArcVmStartupResponse& from);

  inline ArcVmStartupResponse& operator=(const ArcVmStartupResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ArcVmStartupResponse(ArcVmStartupResponse&& from) noexcept
    : ArcVmStartupResponse() {
    *this = ::std::move(from);
  }

  inline ArcVmStartupResponse& operator=(ArcVmStartupResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ArcVmStartupResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ArcVmStartupResponse* internal_default_instance() {
    return reinterpret_cast<const ArcVmStartupResponse*>(
               &_ArcVmStartupResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(ArcVmStartupResponse* other);
  friend void swap(ArcVmStartupResponse& a, ArcVmStartupResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ArcVmStartupResponse* New() const final {
    return CreateMaybeMessage<ArcVmStartupResponse>(nullptr);
  }

  ArcVmStartupResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ArcVmStartupResponse>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const ArcVmStartupResponse& from);
  void MergeFrom(const ArcVmStartupResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ArcVmStartupResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .patchpanel.Device devices = 1;
  int devices_size() const;
  void clear_devices();
  static const int kDevicesFieldNumber = 1;
  ::patchpanel::Device* mutable_devices(int index);
  ::google::protobuf::RepeatedPtrField< ::patchpanel::Device >*
      mutable_devices();
  const ::patchpanel::Device& devices(int index) const;
  ::patchpanel::Device* add_devices();
  const ::google::protobuf::RepeatedPtrField< ::patchpanel::Device >&
      devices() const;

  // @@protoc_insertion_point(class_scope:patchpanel.ArcVmStartupResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::patchpanel::Device > devices_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_patchpanel_2dservice_2eproto;
};
// -------------------------------------------------------------------

class ArcVmShutdownRequest final :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:patchpanel.ArcVmShutdownRequest) */ {
 public:
  ArcVmShutdownRequest();
  virtual ~ArcVmShutdownRequest();

  ArcVmShutdownRequest(const ArcVmShutdownRequest& from);

  inline ArcVmShutdownRequest& operator=(const ArcVmShutdownRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ArcVmShutdownRequest(ArcVmShutdownRequest&& from) noexcept
    : ArcVmShutdownRequest() {
    *this = ::std::move(from);
  }

  inline ArcVmShutdownRequest& operator=(ArcVmShutdownRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ArcVmShutdownRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ArcVmShutdownRequest* internal_default_instance() {
    return reinterpret_cast<const ArcVmShutdownRequest*>(
               &_ArcVmShutdownRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(ArcVmShutdownRequest* other);
  friend void swap(ArcVmShutdownRequest& a, ArcVmShutdownRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ArcVmShutdownRequest* New() const final {
    return CreateMaybeMessage<ArcVmShutdownRequest>(nullptr);
  }

  ArcVmShutdownRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ArcVmShutdownRequest>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const ArcVmShutdownRequest& from);
  void MergeFrom(const ArcVmShutdownRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ArcVmShutdownRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 cid = 1;
  void clear_cid();
  static const int kCidFieldNumber = 1;
  ::google::protobuf::int32 cid() const;
  void set_cid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:patchpanel.ArcVmShutdownRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::int32 cid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_patchpanel_2dservice_2eproto;
};
// -------------------------------------------------------------------

class ArcVmShutdownResponse final :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:patchpanel.ArcVmShutdownResponse) */ {
 public:
  ArcVmShutdownResponse();
  virtual ~ArcVmShutdownResponse();

  ArcVmShutdownResponse(const ArcVmShutdownResponse& from);

  inline ArcVmShutdownResponse& operator=(const ArcVmShutdownResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ArcVmShutdownResponse(ArcVmShutdownResponse&& from) noexcept
    : ArcVmShutdownResponse() {
    *this = ::std::move(from);
  }

  inline ArcVmShutdownResponse& operator=(ArcVmShutdownResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ArcVmShutdownResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ArcVmShutdownResponse* internal_default_instance() {
    return reinterpret_cast<const ArcVmShutdownResponse*>(
               &_ArcVmShutdownResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(ArcVmShutdownResponse* other);
  friend void swap(ArcVmShutdownResponse& a, ArcVmShutdownResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ArcVmShutdownResponse* New() const final {
    return CreateMaybeMessage<ArcVmShutdownResponse>(nullptr);
  }

  ArcVmShutdownResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ArcVmShutdownResponse>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const ArcVmShutdownResponse& from);
  void MergeFrom(const ArcVmShutdownResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ArcVmShutdownResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:patchpanel.ArcVmShutdownResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_patchpanel_2dservice_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ArcStartupRequest

// int32 pid = 1;
inline void ArcStartupRequest::clear_pid() {
  pid_ = 0;
}
inline ::google::protobuf::int32 ArcStartupRequest::pid() const {
  // @@protoc_insertion_point(field_get:patchpanel.ArcStartupRequest.pid)
  return pid_;
}
inline void ArcStartupRequest::set_pid(::google::protobuf::int32 value) {
  
  pid_ = value;
  // @@protoc_insertion_point(field_set:patchpanel.ArcStartupRequest.pid)
}

// -------------------------------------------------------------------

// ArcStartupResponse

// -------------------------------------------------------------------

// ArcShutdownRequest

// int32 pid = 1;
inline void ArcShutdownRequest::clear_pid() {
  pid_ = 0;
}
inline ::google::protobuf::int32 ArcShutdownRequest::pid() const {
  // @@protoc_insertion_point(field_get:patchpanel.ArcShutdownRequest.pid)
  return pid_;
}
inline void ArcShutdownRequest::set_pid(::google::protobuf::int32 value) {
  
  pid_ = value;
  // @@protoc_insertion_point(field_set:patchpanel.ArcShutdownRequest.pid)
}

// -------------------------------------------------------------------

// ArcShutdownResponse

// -------------------------------------------------------------------

// ArcVmStartupRequest

// int32 cid = 1;
inline void ArcVmStartupRequest::clear_cid() {
  cid_ = 0;
}
inline ::google::protobuf::int32 ArcVmStartupRequest::cid() const {
  // @@protoc_insertion_point(field_get:patchpanel.ArcVmStartupRequest.cid)
  return cid_;
}
inline void ArcVmStartupRequest::set_cid(::google::protobuf::int32 value) {
  
  cid_ = value;
  // @@protoc_insertion_point(field_set:patchpanel.ArcVmStartupRequest.cid)
}

// -------------------------------------------------------------------

// Device

// string ifname = 1;
inline void Device::clear_ifname() {
  ifname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Device::ifname() const {
  // @@protoc_insertion_point(field_get:patchpanel.Device.ifname)
  return ifname_.GetNoArena();
}
inline void Device::set_ifname(const ::std::string& value) {
  
  ifname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:patchpanel.Device.ifname)
}
#if LANG_CXX11
inline void Device::set_ifname(::std::string&& value) {
  
  ifname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:patchpanel.Device.ifname)
}
#endif
inline void Device::set_ifname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ifname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:patchpanel.Device.ifname)
}
inline void Device::set_ifname(const char* value, size_t size) {
  
  ifname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:patchpanel.Device.ifname)
}
inline ::std::string* Device::mutable_ifname() {
  
  // @@protoc_insertion_point(field_mutable:patchpanel.Device.ifname)
  return ifname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Device::release_ifname() {
  // @@protoc_insertion_point(field_release:patchpanel.Device.ifname)
  
  return ifname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Device::set_allocated_ifname(::std::string* ifname) {
  if (ifname != nullptr) {
    
  } else {
    
  }
  ifname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ifname);
  // @@protoc_insertion_point(field_set_allocated:patchpanel.Device.ifname)
}

// uint32 ipv4_addr = 2;
inline void Device::clear_ipv4_addr() {
  ipv4_addr_ = 0u;
}
inline ::google::protobuf::uint32 Device::ipv4_addr() const {
  // @@protoc_insertion_point(field_get:patchpanel.Device.ipv4_addr)
  return ipv4_addr_;
}
inline void Device::set_ipv4_addr(::google::protobuf::uint32 value) {
  
  ipv4_addr_ = value;
  // @@protoc_insertion_point(field_set:patchpanel.Device.ipv4_addr)
}

// -------------------------------------------------------------------

// ArcVmStartupResponse

// repeated .patchpanel.Device devices = 1;
inline int ArcVmStartupResponse::devices_size() const {
  return devices_.size();
}
inline void ArcVmStartupResponse::clear_devices() {
  devices_.Clear();
}
inline ::patchpanel::Device* ArcVmStartupResponse::mutable_devices(int index) {
  // @@protoc_insertion_point(field_mutable:patchpanel.ArcVmStartupResponse.devices)
  return devices_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::patchpanel::Device >*
ArcVmStartupResponse::mutable_devices() {
  // @@protoc_insertion_point(field_mutable_list:patchpanel.ArcVmStartupResponse.devices)
  return &devices_;
}
inline const ::patchpanel::Device& ArcVmStartupResponse::devices(int index) const {
  // @@protoc_insertion_point(field_get:patchpanel.ArcVmStartupResponse.devices)
  return devices_.Get(index);
}
inline ::patchpanel::Device* ArcVmStartupResponse::add_devices() {
  // @@protoc_insertion_point(field_add:patchpanel.ArcVmStartupResponse.devices)
  return devices_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::patchpanel::Device >&
ArcVmStartupResponse::devices() const {
  // @@protoc_insertion_point(field_list:patchpanel.ArcVmStartupResponse.devices)
  return devices_;
}

// -------------------------------------------------------------------

// ArcVmShutdownRequest

// int32 cid = 1;
inline void ArcVmShutdownRequest::clear_cid() {
  cid_ = 0;
}
inline ::google::protobuf::int32 ArcVmShutdownRequest::cid() const {
  // @@protoc_insertion_point(field_get:patchpanel.ArcVmShutdownRequest.cid)
  return cid_;
}
inline void ArcVmShutdownRequest::set_cid(::google::protobuf::int32 value) {
  
  cid_ = value;
  // @@protoc_insertion_point(field_set:patchpanel.ArcVmShutdownRequest.cid)
}

// -------------------------------------------------------------------

// ArcVmShutdownResponse

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace patchpanel

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_patchpanel_2dservice_2eproto
